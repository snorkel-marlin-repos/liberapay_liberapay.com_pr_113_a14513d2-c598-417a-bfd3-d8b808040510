from __future__ import division, print_function, unicode_literals

from base64 import b64encode

from aspen import Response

from liberapay.elsewhere._paginators import _modify_query
from liberapay.exceptions import AuthRequired
from liberapay.models.participant import Participant
from liberapay.utils import get_participant

[---]

request.allow('GET', 'POST')
if user.ANON:
    raise AuthRequired

team = get_participant(state, restrict=False)
if team.kind != 'group':
    raise Response(404)

action = request.path['action']
msg = None
confirm = None

if action in ('accept', 'refuse'):
    invite = website.db.one("""
        SELECT *
          FROM events
         WHERE type LIKE 'invite%%'
           AND payload->>'invitee' = %s::text
      ORDER BY ts DESC
         LIMIT 1
    """, (user.id,))
    if not invite:
        raise Response(400, _("You are not invited to join this team."))
    if invite.type == 'invite_accept':
        raise Response(200, _("You have already accepted this invitation."))
    if invite.type == 'invite_refuse':
        raise Response(400, _("You have already refused this invitation."))
elif not user.member_of(team):
    raise Response(403, _("You are not a member of this team."))

if action == 'invite':
    invitee = Participant.from_username(request.body['username'])
    if not invitee:
        raise Response(404, _("User not found."))
    if invitee.kind in ('group', 'community'):
        raise Response(400, _("A team can't join a team"))
    if invitee.status != 'active':
        raise Response(400, _("You can't invite an inactive user to join a team."))
    if not invitee.member_of(team):
        team.invite(invitee, user)
        msg = _("{0} has been invited to the team.", invitee.username)
    else:
        msg = _("{0} is already a member of this team.", invitee.username)

elif action == 'leave':
    if not request.body.get('confirmed'):
        confirm = _("Are you sure you want to leave this team?")
    else:
        team.set_take_for(user, None, user)
        if not team.nmembers:
            team.close(None)

elif action == 'accept':
    with website.db.get_cursor() as c:
        team.add_event(c, 'invite_accept', dict(invitee=user.id))
        team.add_member(user)
    msg = _("You are now a member of the team.")

elif action == 'refuse':
    with website.db.get_cursor() as c:
        team.add_event(c, 'invite_refuse', dict(invitee=user.id))
    response.redirect('/')

else:
    raise Response(400, "bad action")

back_to = request.qs.get('back_to') or ('../income' if action == 'accept' else '/')
if not confirm:
    if msg:
        back_to = _modify_query(back_to, 'success', b64encode(msg.encode('utf8')))
    response.redirect(back_to)

msg = confirm

[---] text/html
% extends "templates/base.html"
% block content
    % from "templates/confirm.html" import confirm with context
    {{ confirm(msg, request.body, back_to) }}
% endblock

from datetime import datetime

from aspen import Response
from mangopaysdk.entities.userlegal import UserLegal
from mangopaysdk.entities.usernatural import UserNatural

from liberapay.billing import mangoapi
from liberapay.billing.exchanges import repr_exception, ResponseException
from liberapay.utils import get_participant

EPOCH = datetime(1970, 1, 1)
KEYS_NATURAL = 'FirstName LastName CountryOfResidence Nationality'.split()
KEYS_LEGAL = ['Name', 'LegalPersonType'] + ['LegalRepresentative'+k for k in KEYS_NATURAL]

[---]
request.allow('GET', 'POST')
participant = get_participant(state, restrict=True)
title = participant.username
error = ''

if request.method == 'POST':
    body = request.body

    if participant.kind == 'individual':
        account = participant.get_mangopay_account() or UserNatural()
        p = ''
        keys = KEYS_NATURAL
    else:
        account = participant.get_mangopay_account() or UserLegal()
        p = 'LegalRepresentative'
        keys = KEYS_LEGAL

    account.Email = participant.email
    for k in keys:
        v = body.get(k)
        if v:
            setattr(account, k, v)

    dob = body.get(p+'Birthday', '')
    if dob:
        try:
            dt = datetime(*map(int, dob.split('-')))
            setattr(account, p+'Birthday', (dt - EPOCH).total_seconds())
        except ValueError:
            error = _("Invalid date of birth.")

    if not error:
        try:
            if account.Id:
                if not account.Address.Country:
                    account.Address = None
                account = mangoapi.users.Update(account)
            elif body.get('terms') == 'agree':
                account = mangoapi.users.Create(account)
                id = website.db.one("""
                    UPDATE participants
                       SET mangopay_user_id = %s
                     WHERE id = %s
                       AND mangopay_user_id IS NULL
                 RETURNING mangopay_user_id
                """, (account.Id, participant.id))
                if id != account.Id:
                    raise Response(409, "race condition")
            else:
                error = _("You have to agree to MangoPay's Terms of Service.")
        except ResponseException as err:
            error = repr_exception(err)
            website.tell_sentry(err, state)

    if error and request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        raise Response(400, error)

else:
    account = participant.get_mangopay_account()

[---] application/json
{}

[---] text/html
% extends "templates/settings.html"

% block content
<div class="paragraph">
% if not participant.email
<p class="alert alert-warning">{{
    _("Please {0}verify your email address{1} then reload this page.",
      '<a href="./emails/" target="_blank">'|safe, '</a>'|safe)
}}</p>
% else
<form action="" method="POST" class="js-submit">

    % if error
    <div class="alert alert-danger">{{ error }}</div>
    % endif

    <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />

    % include "templates/identity-form.html"

    <button class="btn btn-primary" type="submit">{{ _("Save") }}</button>

</form>
% endif
</div>
% endblock
